<?php

/**
 * This Controller manage the project documentation.
 * The index route leads to global documentation.
 * The classDefinition route leads to autogenerated documentation from code comments.
 *
 * @author David Marsalone
 */
class C_doc extends Controller{
    
    /**
     * Display various static pages wich explain how to use the framework.
     * @param string $page the page to display
     * @return View The view will be one of the template located in v/doc/pages.
     */
    public function index($page=null){
        $this->setCssAndJs();
        //if too much arguments redirect to the best page url
        if(func_num_args()>1){
            $this->redirect302($this->routeToFunction."/$page");
        }
        
        $vv= VV_doc_static::getPage($page);
        
        //if no page found display the 404
        if(!$vv){
            //custom 404 error page for doc section.
            $this->setHeader404();
            $vv= new VV_404();
            $vv->message="The page ".Site::url($this->route,true)." cannot be found";
            return new View("doc/404",$vv);
        }
        
        
        $view=new View($vv->templateUrl,$vv);
        return $view;
    }
    /**
     * This route will display php documentation of the designed class. 
     * It works with the framework files but also with the file you designed.
     * The documentation come from your comments...so it's up to you to get it well documented or not. 
     * @param string $className Well, the class name wich you want to display detailled documentation.
     * @return View The view template will be doc/reference/class.php and can 
     */
    public function classDefinition($className=false){
        $this->setCssAndJs();
        $vv=new VV_doc_reference_class();
        $vv->run();
        $vv->setClassName($className);
        $view=new View("doc/reference/class",$vv);
        return $view;

    }
    public function basicTemplate(){
       return new View("doc/samples/simple-template", null); 
    }
    /**
     * include javascripts and CSS to the right places
     */
    private function setCssAndJs(){

        //modernizer
        JS::addToHeader("pub/libs/modernizr-2.5.3-respond-1.1.0.min.js");
        //jquery
        JS::addAfterBody("pub/libs/jquery-1.7.2.js");
        //bootstrap
        JS::addAfterBody("pub/libs/bootstrap/js/bootstrap.js");

        //vkbeautify (to manage code formating like indentation in xmls)
        JS::addAfterBody("pub/libs/code-prettify/vkbeautify.0.98.01.beta.js"); // bug if compress and minified
        //google code prettify
        JS::addAfterBody("pub/libs/code-prettify/google-code-prettify/prettify.js");
        CSS::addToHeader("pub/libs/code-prettify/google-code-prettify/prettify.css");
        //our class that manage both librairies
        JS::addAfterBody("pub/libs/code-prettify/Prettify.js");
        
        //compile and integrate less files
        $lessVariables=array(
            "phpAppFolder"=>"'".Site::url("pub")."'"
        );
        //get the compiled less file
        $lessFile=Less::getCss("pub/app/Doc",$lessVariables);
        //add the file to header section
        CSS::addToHeader($lessFile);
        
        
        //app...the last one!
        JS::addAfterBody("pub/app/Main.js");
        
    }
    
}
